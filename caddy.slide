#Go for Network Ops
Writing a Caddy Plugin
Go Reston Meetup
18:30 16 Aug 2017
Tags: golang, reston, caddy

James Boswell
https://github.com/jamesboswell
jim@jimboswell.net
@jimb on gophers slack
https://invite.slack.golangbridge.org/

* before we get into Caddy and plugins...
Why would I decide to use a new web server and write my own plugin?
.image gophercomplex6.jpg

* Problem Statement
- An older RHEL 6 system with old Apache 2.2 
- Could only do TLS 1.0 want to get to TLS 1.2︎
- No easy access to new packages for internal reasons
- Didn't want to hand compile Apache and mods and dive into dependency hell
- Re-imaging not an option, also internal reasons
: HTTP 1.1 only server,  broken OpenSSL
: not easy to patch
: not possible to reimage
: i needed a better option

*Requirements*
- HTTP Basic Authentication done with RADIUS using mod_auth_xradius
#- Not possible to change authentication protocol

.image pkg.png
Ignoring the RADIUS module...
We can fix TLS by just upgrading OpenSSL... easy right?

: Need to keep HTTP Basic Authentication
: MUST keep RADIUS protocol authentication

* OpenSSL upgrade....
I tried an RPM for OpenSSL 1.0.1e and it was bad...
*Heartbleed*  _...lesson_ _learned_.

.image heartbleed.png _ 200
.caption [[http://heartbleed.com]]
 OpenSSL versions  1.0.1 through 1.0.1f, 1.0.2-beta, and 1.0.2-beta1 ALL affected
 CVE list is just ridiculous...
There must be something better?

: OpenSSL is frought with issues...just Google it.
: this was a nightmare, end of story



* Options
- Looked for more up to date repos/RPMs
- Tried making my own RPMs from source

*Not* *easy* or fun for a 7 year old operating system without access to fixes
.image stars.png _ 125
Research led me to *Caddy*
- written in *Go*!
- single statically linked binary (no external dependencies!)
- up to date TLS implementation based on Go stdlib
 - *NO* OpenSSL

: Go!! yay!
: better / cleaner TLS
: HTTP 2!
: no dependency hell




* What is Caddy?
Developed by [[https://github.com/mholt][Matt Holt]], Caddy is an open source HTTP/2-enabled web server written in Go. It uses the Go standard library for its HTTP functionality.

One of Caddy's most notable features is enabling HTTPS by default (Let's Encrypt). It is the first general-purpose web server to do so without requiring extra configuration.

\...and it's highly *customizable* with *plugins*


# .image gopherbw.png _ 250
.image caddy-web-server-black.png
.caption [[https://caddyserver.com]]

: caddyserver.com
: can download and choose your plugins
: many plugins available
: Caddy is also a DNS server!

* Caddy plugin examples
tls.dns.digitalocean
tls.dns.route53
http.awslambda
http.cache
http.cgi
http.cors
http.datadog
http.git
http.gopkg
http.grpc
http.hugo
http.jwt
http.minify
http.prometheus
http.ratelimit

* Ok, so Caddy is awesome... but no RADIUS plugin 🙁
- Need to replace *mod_auth_xradius*, what does mod_auth_xradius do?
.image mod_auth_xradius.png
.caption [[http://www.outoforder.cc/projects/httpd/mod_auth_xradius/]]
Not using the memcache feature
So at a *minimum*: we need a Caddy plugin to speak RADIUS and have a local user cache

* What is RADIUS?
Remote Authentication Dial-In User Service (RADIUS) is a networking protocol that provides centralized Authentication, Authorization, and Accounting (AAA or Triple A)

.image radius.png
It's a relatively simple protocol ([[https://tools.ietf.org/html/rfc2865][rfc2865]]) for authentication.

Google results yield a few Go packages

- [[https://github.com/bronze1man/radius]]
- [[layeh.com/radius]] - *selected* for simpler implementation

: Remote Authentication Dial-In User Service (RADIUS) is a networking protocol that provides centralized Authentication, Authorization, and Accounting (AAA or Triple A)

* RADIUS example
.code auth.go

* caddy-radius
Ok, so we can exchange RADIUS packets.  

Now to hook this into Caddy, decided to write my own plugin to perform HTTP Basic Authentication with a RADIUS backend

Caddy already has a [[https://github.com/mholt/caddy/tree/master/caddyhttp/basicauth][basicauth]] package, which performs HTTP Basic Authentication, so I had some good examples.



#.code radius.go
.image run.png
: I looked around at basicauth and was able to get some good ideas about how to structure my plugin



* caddy-radius flow

.image flow.png

* Extending Caddy
[[https://github.com/mholt/caddy/wiki/Extending-Caddy]]

Between studying existing plugins *basicauth* and a now deleted *caddy-ldap* I was able to learn a lot about how to structure my plugin

- setup function - to handle plugin to Caddy and Caddyfile directives
- ServeHTTP handler
- an auth func to do the RADIUS authentication
- then later added a cache with BoltDB to reduce RADIUS calls

* Caddyfile &  Directives
.code caddyfile

* Plugin setup.go
    func init() {
        caddy.RegisterPlugin("radiusauth", caddy.Plugin{
            ServerType: "http",
            Action:     setup,
        })
    }

Declare our server ServerType

Action, is Calls our plugin setup function,  typically this will parse the Caddyfile directives
for our plugin

* Setup / directives parsing
Caddy has it's own lexer/parser for Caddyfile

    func parseRadiusConfig(c *caddy.Controller) (radiusConfig, error) {
        for c.Next() {
                // No extra args expected
                if len(c.RemainingArgs()) > 0 {
                    return config, c.ArgErr()
                }
                for c.NextBlock() {
                    switch c.Val() {
                    case "server":
                        for _, server := range c.RemainingArgs() {

                            host, port, err := net.SplitHostPort(server)
                            if err != nil {
                                return config, c.Errf("[radiusauth]: invalid server address %v", server)
                            }
                            //TODO validate IP address & port number
                            config.Server = append(config.Server, net.JoinHostPort(host, port))
                        }
                        /// etc etc

* ServeHTTP
.code serve.go


* Plugin your plugin
You have to edit 2 files in Caddy 

- caddy/caddymain/run.go
- caddyhttp/httpserver/plugin.go


    caddy/caddymain/run.go
            "github.com/mholt/caddy/caddytls"
        // This is where other plugins get plugged in (imported)
    +       _ "github.com/jamesboswell/caddy-radius"
    )

  /caddyhttp/httpserver/plugin.go
            "search",    // github.com/pedronasser/caddy-search
            "expires",   // github.com/epicagency/caddy-expires
            "basicauth",
    +       "radiusauth",
            "redir",
            "status",
            "cors",   // github.com/captncraig/cors/caddy

* Build Caddy

* 
.image assertgo_512.png

* Code walk-through - demonstration
[[https://github.com/jamesboswell/caddy-radius]]

setup.go 
- parseRadiusConfig parses Caddyfile directives

radius.go 
- ServeHTTP is the main middleware

radius.go 
- auth() is the main authentication logic

filter.go 
- logic to handle URL path filtering (auth or no auth)

cache.go 
- BoltDB to cache user credentials to reduce RADIUS load

